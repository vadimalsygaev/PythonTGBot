import asyncio
import datetime
import json
from copy import deepcopy
from datetime import datetime

from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler


def get_data():
    with open('data.json', 'r') as file:
        data = json.load(file)

    return data


def update_file(data: dict):
    with open('data.json', 'w') as file:
        file.write(
            json.dumps(data, indent=4)
        )


# user_id: {
#   'reminders': [
#       {
#           'text': 'reminder 1',
#           'time': '26.04.2025 18:00'
#       },
#       {
#           'text': 'reminder 2',
#           'time': '3.05.2025 22:00'
#       }
#   ],
#   'state': 'start',
# }
data = get_data()

REMINDERS_LIMIT = 5

router = Router()
scheduler = AsyncIOScheduler()

# 1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
# 2. –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π


@router.message(Command('start'))
async def start_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in data:
        data[str(user_id)] = {
            'reminders': [],
            'new_reminder': {},
            'state': 'start',
        }

        update_file(data)

    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ \n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help'
    )


@router.message(Command('help'))
async def help_handler(message: Message):
    await message.answer(
        '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        '/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ \n'
        '/delete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ \n'
        '/show - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è \n'
    )


@router.message(Command('add'))
async def add_handler(message: Message):
    user_id = message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç
    user_reminders = data[str(user_id)]['reminders']
    if len(user_reminders) >= REMINDERS_LIMIT:
        await message.answer('–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –£–¥–∞–ª–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö')
        return

    data[str(user_id)]['state'] = 'add_text'
    update_file(data)

    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')


@router.message(Command('show'))
async def show_handler(message: Message):
    user_id = message.from_user.id
    user_reminders = data[str(user_id)]['reminders']

    if not user_reminders:
        await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
        return

    answer_text = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: \n\n'
    for i in range(len(user_reminders)):
        answer_text += f'{i + 1}. {user_reminders[i]} \n\n'

    await message.answer(answer_text)


@router.message(Command('delete'))
async def delete_handler(message: Message):
    user_id = message.from_user.id
    data[str(user_id)]['state'] = 'delete'
    update_file(data)

    await show_handler(message)
    await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')


@router.message()
async def message_handler(message: Message):
    user_id = message.from_user.id
    user_state = data[str(user_id)]['state']

    if user_state == 'add_text':
        data[str(user_id)]['new_reminder'] = {
            'text': message.text
        }

        await message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
        data[str(user_id)]['state'] = 'add_time'

        update_file(data)

    elif user_state == 'add_time':
        new_reminder = data[str(user_id)]['new_reminder']
        remind_dt = datetime.strptime(message.text, '%d.%m.%Y %H:%M')

        new_reminder['time'] = remind_dt.strftime("%Y-%m-%d %H:%M:%S")

        data[str(user_id)]['reminders'].append(new_reminder)
        await message.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')

        data[str(user_id)]['state'] = 'start'
        data[str(user_id)]['new_reminder'] = {}

        update_file(data)

    elif user_state == 'delete':
        try:
            user_reminders = data[str(user_id)]['reminders']

            reminder_index = int(message.text)

            if 0 > reminder_index > len(user_reminders):
                await message.answer('–ü–æ—Ö–æ–∂–µ, —Ç—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')
                return

            user_reminders.pop(reminder_index - 1)
            data[str(user_id)]['reminders'] = user_reminders

            await message.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
            data[str(user_id)]['state'] = 'start'

            update_file(data)

        except:
            await message.answer('–ü–æ—Ö–æ–∂–µ, —Ç—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')

    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é')

async def send_reminders(bot):
    data_copy = deepcopy(data)

    for user_id, user_data in data_copy.items():
        for reminder in user_data['reminders']:
            remind_dt = datetime.strptime(reminder['time'], '%Y-%m-%d %H:%M:%S')
            now_dt = datetime.now()

            if (
                    remind_dt.year == now_dt.year and
                    remind_dt.month == now_dt.month and
                    remind_dt.day == now_dt.day and
                    remind_dt.hour == now_dt.hour and
                    remind_dt.minute == now_dt.minute
            ):
                await bot.send_message(
                    user_id,
                    f'üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: \n\n{reminder["text"]}'
                )

async def main():
    bot = Bot(token='7874118763:AAEOiyw2T8bECxXDXzR801Cl_xnH4-LNANw')
    dp = Dispatcher()

    dp.include_router(router)

    scheduler.add_job(send_reminders, 'interval', minutes = 1, args = [bot])
    scheduler.start()

    await dp.start_polling(bot)


asyncio.run(main())
